#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <time.h>
#include <omp.h>
#include<string>

using namespace std;
int main() {
    string texto;
    double  matrix[3][3];
    long long int ver = 0;
    long long int azul = 0;
    double  matrixsarrus[3][5];
    int total = 0;
    double tempo_execucao = 0.0;
    double determinante = 0.0000000;
    double inicio = 0.0;
    double final = 0.0;

    for (int exec = 0; exec < 1; exec++) {
        ver = 0;
        azul = 0;
        total = 0;
        determinante = 0;

        matrix[0][0] = 1.332;
        matrix[0][1] = 5.111;
        matrix[0][2] = -2.81;
        matrix[1][0] = 8.01;
        matrix[1][1] = 3.41;
        matrix[1][2] = 0.14;
        matrix[2][0] = 4.22;
        matrix[2][1] = -1.31;
        matrix[2][2] = 2.41;

        inicio = omp_get_wtime();


         #pragma omp parallel  num_threads(3)
        {

            int id = omp_get_thread_num();

                for (int c = 0; c < 5; c++) {

                    if (c > 2) {

                        matrixsarrus[id][c] = matrix[id][(c - 3)];
                    }
                    else {
                        matrixsarrus[id][c] = matrix[id][c];
                    }
                }
       
        #pragma omp barrier

            double soma_local = 0;
            double sub_local = 0;

                soma_local += matrixsarrus[0][id] * matrixsarrus[1][id + 1] * matrixsarrus[2][id + 2];
                
            
                sub_local -= matrixsarrus[0][id+2] * matrixsarrus[1][id+1] * matrixsarrus[2][id];
                //printf("Number of threads = %d\n", omp_get_thread_num());
            
        #pragma omp atomic
            determinante += soma_local+sub_local;

        }
        final = omp_get_wtime();
        for (int l = 0; l < 3; l++) {
            for (int c = 0; c < 5; c++) {
                cout << matrixsarrus[l][c] << "          ";
            }
            cout << endl << endl << endl << endl;
        }

    }

    cout << "Determinante " << determinante << endl;
    tempo_execucao += (final - inicio);
    cout << (int)tempo_execucao << "     tempo_execucao" << tempo_execucao;



}
