#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#include <time.h>
#include <omp.h>
#include<string>

using namespace std;

int main() {
    double  matrix[3][3] = { 1.332, 5.111, -2.81,
                             8.01, 3.41, 0.14,
                             4.22, -1.31, 2.41 };
    double  matrixsarrus[3][5];
    double tempo_execucao = 0.0;
    double determinante = 0.0;
    double inicio = 0.0;
    double final = 0.0;


    for (int exec = 0; exec < 1000; exec++) {

        determinante = 0;

        inicio += omp_get_wtime();

#pragma omp parallel  num_threads(3)
        {
            int id = omp_get_thread_num();

            for (int c = 0; c < 5; c++) {
                if (c > 2)
                    matrixsarrus[id][c] = matrix[id][(c - 3)];

                else
                    matrixsarrus[id][c] = matrix[id][c];

            }

#pragma omp barrier

            double soma_local = 0;
            double sub_local = 0;

            soma_local += matrixsarrus[0][id] * matrixsarrus[1][id + 1] * matrixsarrus[2][id + 2];
            sub_local -= matrixsarrus[0][id + 2] * matrixsarrus[1][id + 1] * matrixsarrus[2][id];
            //printf("Number of threads = %d\n", omp_get_thread_num());

#pragma omp atomic
            determinante += soma_local + sub_local;

        }

        final += omp_get_wtime();

        for (int l = 0; l < 3; l++) {
            for (int c = 0; c < 5; c++) {
                cout << matrixsarrus[l][c] << "          ";
            }
            cout << endl << endl << endl << endl;
        }
    }

    cout << "Determinante " << determinante << endl;
    tempo_execucao = (final - inicio);
    cout << (int)tempo_execucao << "     tempo_execucao" << tempo_execucao;
}
